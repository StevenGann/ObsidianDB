{
  "api/ObsidianDB.CallbackManager.Callback.html": {
    "href": "api/ObsidianDB.CallbackManager.Callback.html",
    "title": "Delegate CallbackManager.Callback | ObsidianDB",
    "keywords": "Delegate CallbackManager.Callback Namespace ObsidianDB Assembly ObsidianDB.dll Delegate type for note update callbacks. public delegate void CallbackManager.Callback(Note note) Parameters note Note Delegate type for note update callbacks."
  },
  "api/ObsidianDB.CallbackManager.html": {
    "href": "api/ObsidianDB.CallbackManager.html",
    "title": "Class CallbackManager | ObsidianDB",
    "keywords": "Class CallbackManager Namespace ObsidianDB Assembly ObsidianDB.dll Manages callbacks for note updates in ObsidianDB. This class provides a subscription-based system for notifying interested parties when specific notes are modified or updated. public class CallbackManager : IDisposable Inheritance object CallbackManager Implements IDisposable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors CallbackManager(ObsidianDB) Initializes a new instance of the CallbackManager. public CallbackManager(ObsidianDB db) Parameters db ObsidianDB The ObsidianDB instance this manager belongs to. Methods Dispose() Releases all resources used by the CallbackManager instance. public void Dispose() Dispose(bool) Releases the unmanaged resources used by the CallbackManager instance and optionally releases the managed resources. protected virtual void Dispose(bool disposing) Parameters disposing bool true to release both managed and unmanaged resources; false to release only unmanaged resources. ~CallbackManager() Finalizes the CallbackManager instance. protected ~CallbackManager() Subscribe(string, Callback) Subscribes a callback to be notified when a specific note is updated. public void Subscribe(string id, CallbackManager.Callback callback) Parameters id string The ID of the note to subscribe to. callback CallbackManager.Callback The callback function to be invoked when the note is updated. TriggerCallbacks(Note) Immediately triggers all callbacks associated with a specific note. This method bypasses the update queue and processes callbacks immediately. public void TriggerCallbacks(Note note) Parameters note Note The note that triggered the callbacks. Unsubscribe(string, Callback) Unsubscribes a callback from a specific note. public bool Unsubscribe(string id, CallbackManager.Callback callback) Parameters id string The ID of the note to unsubscribe from. callback CallbackManager.Callback The callback function to remove. Returns bool True if the callback was found and removed, false otherwise."
  },
  "api/ObsidianDB.Logging.LoggerService.html": {
    "href": "api/ObsidianDB.Logging.LoggerService.html",
    "title": "Class LoggerService | ObsidianDB",
    "keywords": "Class LoggerService Namespace ObsidianDB.Logging Assembly ObsidianDB.dll Provides logging services for the ObsidianDB application. public static class LoggerService Inheritance object LoggerService Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods ConfigureLogging(Action<ILoggingBuilder>) Configures the logging level and providers. public static void ConfigureLogging(Action<ILoggingBuilder> configure) Parameters configure Action<ILoggingBuilder> Action to configure the logging builder. GetLogger(string) Gets a logger for the specified category name. public static ILogger GetLogger(string categoryName) Parameters categoryName string The category name for the logger. Returns ILogger An ILogger instance. GetLogger<T>() Gets a logger for the specified type. public static ILogger<T> GetLogger<T>() Returns ILogger<T> An ILogger instance. Type Parameters T The type to create a logger for."
  },
  "api/ObsidianDB.Logging.html": {
    "href": "api/ObsidianDB.Logging.html",
    "title": "Namespace ObsidianDB.Logging | ObsidianDB",
    "keywords": "Namespace ObsidianDB.Logging Classes LoggerService Provides logging services for the ObsidianDB application."
  },
  "api/ObsidianDB.Note.BackLink.html": {
    "href": "api/ObsidianDB.Note.BackLink.html",
    "title": "Class Note.BackLink | ObsidianDB",
    "keywords": "Class Note.BackLink Namespace ObsidianDB Assembly ObsidianDB.dll Represents a backlink from another note to this note. public class Note.BackLink Inheritance object Note.BackLink Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors BackLink(string, string?, string) public BackLink(string title, string? displayText, string sourceNoteId) Parameters title string displayText string sourceNoteId string Properties DisplayText Gets the display text of the link, if different from the title. public string? DisplayText { get; } Property Value string SourceNoteId Gets the ID of the note that contains this link. public string SourceNoteId { get; } Property Value string Title Gets the title of the linked note. public string Title { get; } Property Value string"
  },
  "api/ObsidianDB.Note.ExternalLink.html": {
    "href": "api/ObsidianDB.Note.ExternalLink.html",
    "title": "Class Note.ExternalLink | ObsidianDB",
    "keywords": "Class Note.ExternalLink Namespace ObsidianDB Assembly ObsidianDB.dll Represents an external link to a resource outside the vault. public class Note.ExternalLink Inheritance object Note.ExternalLink Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ExternalLink(string, string) public ExternalLink(string displayText, string url) Parameters displayText string url string Properties DisplayText Gets the display text of the link. public string DisplayText { get; } Property Value string Url Gets the URL of the external resource. public string Url { get; } Property Value string"
  },
  "api/ObsidianDB.Note.InternalLink.html": {
    "href": "api/ObsidianDB.Note.InternalLink.html",
    "title": "Class Note.InternalLink | ObsidianDB",
    "keywords": "Class Note.InternalLink Namespace ObsidianDB Assembly ObsidianDB.dll Represents an internal link to another note in the vault. public class Note.InternalLink Inheritance object Note.InternalLink Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors InternalLink(string, string?, string?) public InternalLink(string title, string? displayText, string? noteId) Parameters title string displayText string noteId string Properties DisplayText Gets the display text of the link, if different from the title. public string? DisplayText { get; } Property Value string NoteId Gets the ID of the linked note, if found in the database. public string? NoteId { get; } Property Value string Title Gets the title of the linked note. public string Title { get; } Property Value string"
  },
  "api/ObsidianDB.Note.html": {
    "href": "api/ObsidianDB.Note.html",
    "title": "Class Note | ObsidianDB",
    "keywords": "Class Note Namespace ObsidianDB Assembly ObsidianDB.dll Represents a Markdown note file in an Obsidian vault, managing its content, metadata, and file operations. This class handles the lifecycle of a note including loading, saving, and maintaining metadata like title, tags, and unique identifiers. It ensures data integrity through atomic file operations and hash validation. public class Note Inheritance object Note Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors Note(string) Initializes a new instance of the Note class from a file path. public Note(string path) Parameters path string The filesystem path to the note file. Must be within the Obsidian vault directory. Remarks The constructor performs several initialization steps: Reads and parses the file content Extracts title, frontmatter, and tags Ensures presence of unique ID and content hash Outputs debug information about the note The note is immediately ready for use after construction. Exceptions FileNotFoundException Thrown when the note file is not found at the specified path. ArgumentException Thrown when the path is invalid or outside the vault directory. InvalidOperationException Thrown when the note does not contain valid frontmatter. Fields Frontmatter Gets or sets the YAML frontmatter stored as key-value pairs. Values are stored as lists to support multi-value YAML fields. The frontmatter is automatically synchronized with the file on save. public Dictionary<string, List<string>?> Frontmatter Field Value Dictionary<string, List<string>> A dictionary containing the note's frontmatter data, where keys are strings and values are lists of strings. Tags Gets or sets the collection of tags found in the note (both in frontmatter and inline). Tags are automatically extracted from both the frontmatter and the note's content. Inline tags are identified by the # symbol followed by non-whitespace characters. public List<string> Tags Field Value List<string> A list of unique tags associated with the note. Properties Backlinks Gets a list of all backlinks to this note from other notes in the vault. public List<Note.BackLink> Backlinks { get; } Property Value List<Note.BackLink> A list of BackLink objects representing links from other notes to this note. Body Gets or sets the main content of the note (everything after the frontmatter). Implements lazy loading - content is only read when accessed. public string Body { get; set; } Property Value string The note's body content as a string, excluding the YAML frontmatter. Remarks Setting this property automatically saves changes to disk. The content is cached after first access to avoid repeated file reads. Changes to the content are tracked through the Hash property. ExternalLinks Gets the collection of external links found in the note. External links are in standard Markdown format Display Text. public List<Note.ExternalLink> ExternalLinks { get; } Property Value List<Note.ExternalLink> Filename Gets or sets the filename portion of the path. This is automatically updated when the Path property changes. public string Filename { get; set; } Property Value string The filename without the directory path. Hash Gets the MD5 hash of the note's content, stored in YAML frontmatter. Used to detect changes when the file is modified externally. The hash is calculated from the note's content only, excluding the YAML frontmatter. public string Hash { get; } Property Value string A string containing the Base64 encoded MD5 hash of the note's content. Exceptions InvalidOperationException Thrown when the note does not contain valid frontmatter. ID Gets the unique identifier for the note, stored in YAML frontmatter. Automatically generates a new GUID if not present. The GUID is used for tracking note changes and maintaining relationships between notes. public string ID { get; } Property Value string A string containing the note's unique identifier in GUID format. Exceptions InvalidOperationException Thrown when the note does not contain valid frontmatter. InternalLinks Gets the collection of internal links found in the note. Internal links are in the format [[Note Title]] or [[Note Title|Display Text]]. public List<Note.InternalLink> InternalLinks { get; } Property Value List<Note.InternalLink> Path Gets or sets the full filesystem path to the note file. The path must be within the Obsidian vault directory. public string Path { get; set; } Property Value string The absolute path to the note file. Exceptions ArgumentException Thrown when the path is outside the vault directory. Title Gets or sets the title of the note, extracted from the first H1 heading (# Title). If no H1 heading is found, falls back to the filename without extension. public string? Title { get; set; } Property Value string The note's title, or null if no H1 heading is found and filename is not available. Methods GetAllLinks() Gets all links in the note, both internal and external. public (List<Note.InternalLink> internalLinks, List<Note.ExternalLink> externalLinks) GetAllLinks() Returns (List<Note.InternalLink> internalLinks, List<Note.ExternalLink> externalLinks) A tuple containing lists of internal and external links. GetExternalLinks() Gets all external links in the note. public List<Note.ExternalLink> GetExternalLinks() Returns List<Note.ExternalLink> A list of external links. GetInternalLinks() Gets all internal links in the note. public List<Note.InternalLink> GetInternalLinks() Returns List<Note.InternalLink> A list of internal links. GetLinksToNote(string) Gets all internal links that point to a specific note. public List<Note.InternalLink> GetLinksToNote(string noteId) Parameters noteId string The ID of the note to find links to. Returns List<Note.InternalLink> A list of internal links that point to the specified note. GetLinksToTitle(string) Gets all internal links that point to a specific note title. public List<Note.InternalLink> GetLinksToTitle(string title) Parameters title string The title of the note to find links to. Returns List<Note.InternalLink> A list of internal links that point to the specified note title. Reload(string) Reloads the note from disk, optionally with a new path. This method preserves the note's state in case of failure and provides detailed error information. public void Reload(string path = \"\") Parameters path string Optional new path for the note. If empty, uses existing path. The new path must be within the vault directory. Remarks This method performs the following operations: Validates the new path if provided Creates a backup of the current state Reloads the note content and metadata Restores the backup if any operation fails Notifies subscribers of the reload Exceptions FileNotFoundException Thrown when the note file is not found. ArgumentException Thrown when the new path is invalid or outside the vault. InvalidOperationException Thrown when the note does not contain valid frontmatter. UpdateLinks() Updates the collections of internal and external links by parsing the note's content. public void UpdateLinks()"
  },
  "api/ObsidianDB.ObsidianDB.html": {
    "href": "api/ObsidianDB.ObsidianDB.html",
    "title": "Class ObsidianDB | ObsidianDB",
    "keywords": "Class ObsidianDB Namespace ObsidianDB Assembly ObsidianDB.dll Represents a database instance for managing an Obsidian vault. This class provides the core functionality for interacting with an Obsidian vault, including note scanning, synchronization, and callback management. public class ObsidianDB : IDisposable Inheritance object ObsidianDB Implements IDisposable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Remarks The ObsidianDB class serves as the main entry point for interacting with an Obsidian vault programmatically. It maintains a collection of notes, manages file system synchronization, and provides a callback system for monitoring changes to notes. Each instance is associated with a specific vault path and maintains its own state independently. Constructors ObsidianDB(string) Initializes a new instance of the ObsidianDB class for the specified vault path. public ObsidianDB(string path) Parameters path string The path to the Obsidian vault directory. Remarks This constructor: Sets up the vault path Initializes the sync manager for file system monitoring Initializes the callback manager for change notifications Registers the instance in the global collection Properties Name Gets the name of the vault, which is the last directory name in the VaultPath. public string Name { get; } Property Value string Notes Gets or sets the collection of notes in the vault. This list is populated during scanning and updated through synchronization. public List<Note> Notes { get; } Property Value List<Note> A list of Note objects representing the notes in the vault. VaultPath Gets or sets the path to the Obsidian vault directory. This path is used as the root for all note operations and file system monitoring. public string VaultPath { get; } Property Value string The absolute path to the Obsidian vault directory. Methods Dispose() Releases all resources used by the ObsidianDB instance. public void Dispose() Dispose(bool) Releases the unmanaged resources used by the ObsidianDB instance and optionally releases the managed resources. protected virtual void Dispose(bool disposing) Parameters disposing bool true to release both managed and unmanaged resources; false to release only unmanaged resources. ~ObsidianDB() Finalizes the ObsidianDB instance. protected ~ObsidianDB() GetDatabaseInstance(string) Retrieves an existing ObsidianDB instance associated with the given note path. public static ObsidianDB? GetDatabaseInstance(string notePath) Parameters notePath string The path to a note file within a vault. Returns ObsidianDB The ObsidianDB instance associated with the vault containing the note, or null if no matching instance is found. Remarks This method searches through all active ObsidianDB instances to find one whose vault path contains the given note path. The comparison is case-insensitive. GetFromId(string) Retrieves a note from the database by its unique identifier. public Note? GetFromId(string id) Parameters id string The unique identifier of the note to retrieve. Returns Note The Note object with the specified ID, or null if not found. Remarks This method uses a dictionary for O(1) lookup performance. GetFromPath(string) Retrieves a note from the database by its full file path. public Note? GetFromPath(string path) Parameters path string The full path to the note file. Returns Note The Note object with the specified path, or null if not found. GetFromTitle(string) Retrieves a note from the database by its title. public Note? GetFromTitle(string title) Parameters title string The title of the note to find. Returns Note The Note object with the specified title, or null if not found. GetNotes() Gets an enumerable collection of all notes in the vault. public IEnumerable<Note> GetNotes() Returns IEnumerable<Note> An enumerable collection of Note objects. Remarks This method provides a safe way to iterate over all notes in the vault. The implementation uses yield return to provide efficient enumeration. ScanNotes() Scans the vault directory for markdown files and loads them into the database. public void ScanNotes() Remarks This method: Recursively searches for all .md files in the vault directory Creates Note objects for each file found Logs the number of files found and any errors encountered Handles exceptions gracefully, logging errors but continuing with other files Update() Updates the database state by processing pending synchronization and callback events. public void Update() Remarks This method should be called periodically to ensure the database stays in sync with the file system and to process any pending callbacks. It: Processes file system changes through the sync manager Executes any pending callbacks through the callback manager"
  },
  "api/ObsidianDB.SyncManager.html": {
    "href": "api/ObsidianDB.SyncManager.html",
    "title": "Class SyncManager | ObsidianDB",
    "keywords": "Class SyncManager Namespace ObsidianDB Assembly ObsidianDB.dll Manages synchronization between the Obsidian vault and the vector database. public class SyncManager : IDisposable Inheritance object SyncManager Implements IDisposable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Remarks The SyncManager class is responsible for maintaining synchronization between the Obsidian vault's file system and the vector database. It monitors file system events and queues operations to keep the vector database in sync with the vault's state. Key features: - Asynchronous processing of file system events - Queue-based operation handling to prevent parallelization issues - Comprehensive logging for monitoring and debugging - Thread-safe operation queuing and processing Constructors SyncManager(ObsidianDB) Initializes a new instance of the SyncManager class. public SyncManager(ObsidianDB db) Parameters db ObsidianDB The ObsidianDB instance to synchronize with. Remarks Sets up a FileSystemWatcher to monitor the Obsidian vault directory for changes to markdown files. The watcher is configured to track various file system events including changes, creations, deletions, and renames. Exceptions ArgumentNullException Thrown when db is null. ArgumentException Thrown when the vault path is invalid. Fields Active Gets or sets whether the SyncManager is actively processing file system events. public bool Active Field Value bool true if the SyncManager is active; otherwise, false. Methods Dispose() Releases all resources used by the SyncManager instance. public void Dispose() Dispose(bool) Releases the unmanaged resources used by the SyncManager instance and optionally releases the managed resources. protected virtual void Dispose(bool disposing) Parameters disposing bool true to release both managed and unmanaged resources; false to release only unmanaged resources. Remarks This method ensures proper cleanup of all resources, including: Cancelling the sync task Waiting for the task to complete Disposing of the cancellation token and semaphore Disposing of the file system watcher ~SyncManager() Finalizes the SyncManager instance. protected ~SyncManager() Tick() Performs periodic synchronization tasks. public void Tick() Remarks This method is called periodically to handle any pending synchronization operations. It starts the sync task if it's not already running."
  },
  "api/ObsidianDB.html": {
    "href": "api/ObsidianDB.html",
    "title": "Namespace ObsidianDB | ObsidianDB",
    "keywords": "Namespace ObsidianDB Classes CallbackManager Manages callbacks for note updates in ObsidianDB. This class provides a subscription-based system for notifying interested parties when specific notes are modified or updated. Note Represents a Markdown note file in an Obsidian vault, managing its content, metadata, and file operations. This class handles the lifecycle of a note including loading, saving, and maintaining metadata like title, tags, and unique identifiers. It ensures data integrity through atomic file operations and hash validation. Note.BackLink Represents a backlink from another note to this note. Note.ExternalLink Represents an external link to a resource outside the vault. Note.InternalLink Represents an internal link to another note in the vault. ObsidianDB Represents a database instance for managing an Obsidian vault. This class provides the core functionality for interacting with an Obsidian vault, including note scanning, synchronization, and callback management. SyncManager Manages synchronization between the Obsidian vault and the vector database. Delegates CallbackManager.Callback Delegate type for note update callbacks."
  },
  "index.html": {
    "href": "index.html",
    "title": "ObsidianDB Documentation | ObsidianDB",
    "keywords": "ObsidianDB Documentation Welcome to the ObsidianDB documentation! ObsidianDB is a powerful vector database integration for Obsidian notes, allowing you to perform semantic searches and create AI-powered features within your Obsidian vault. Features Seamless integration with Obsidian Vector database support for semantic search AI-powered features Real-time synchronization with your vault Easy-to-use API Getting Started To get started with ObsidianDB, check out our API Documentation. Contributing We welcome contributions! Please see our GitHub repository for more information on how to contribute. License This project is licensed under the MIT License - see the LICENSE file for details."
  }
}